{"version":3,"sources":["img/logo_alary.png","getWeb3.js","components/header.jsx","components/stepper.jsx","components/workflow.jsx","components/whitelist.jsx","components/voter.jsx","components/proposal.jsx","components/voting.jsx","components/winner.jsx","components/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","on","location","reload","console","log","provider","providers","HttpProvider","Header","props","owner","states","Fragment","Navbar","bg","variant","Container","Brand","alt","src","logo","width","height","className","Collapse","Text","id","steps","darkTheme","createTheme","palette","mode","HorizStepper","activeStep","parseInt","step","ThemeProvider","theme","Box","sx","Stepper","map","label","index","Step","key","StepLabel","length","Typography","mt","mb","Workflow","handleClick","contract","methods","startProposalsRegistering","send","from","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","Button","onClick","size","Whitelist","whitelist","address","FormVoter","useState","inputAddress","setInputAddress","addVoter","error","Form","Group","Control","type","placeholder","value","onChange","event","target","FormProp","voter","proposals","inputProposal","setinputProposal","addProposal","accounts","controlId","Label","as","rows","prop","FormVoting","inputVote","setinputVote","handleChange","i","indexOf","setVote","Check","name","Winner","winner","style","fontWeight","fontStyle","Footer","App","setState","setStatus","setVoters","setVoter","setProposals","setWinner","useEffect","eth","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","call","workflowStatus","status","getVoter","getAllProposals","allProps","events","WorkflowStatusChange","newStatus","returnValues","changed","err","VoterRegistered","newVoter","voterAddress","voterData","ProposalRegistered","newPropId","proposalId","getOneProposal","propDesc","Voted","voterAddr","winningProposalID","winnerId","winDesc","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.486435fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_alary.77827aa5.png\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          // Refresh page when account switching\n          window.ethereum.on('accountsChanged', () => {\n            window.location.reload();\n          });\n          // Refresh page when chain switching\n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\nimport logo from \"../img/logo_alary.png\";\nimport { Navbar, Container } from \"react-bootstrap\";\n\nfunction Header(props) {\n  const title = \"Proposals for a better company\";\n  const { owner } = props.states;\n\n  return (\n    <React.Fragment>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Container>\n          <Navbar.Brand>\n            <img\n              alt=\"\"\n              src={logo}\n              width=\"30\"\n              height=\"30\"\n              className=\"d-inline-block align-top\"\n            />{\" \"}\n            {title}\n          </Navbar.Brand>\n          <Navbar.Collapse className=\"justify-content-end\">\n            <Navbar.Text id=\"Admin\">Admin: {owner}</Navbar.Text>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    </React.Fragment>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport Typography from \"@mui/material/Typography\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\n\nconst steps = [\n  \"Registering Voters\",\n  \"Proposals Registration Started\",\n  \"Proposals Registration Ended\",\n  \"Voting Session Started\",\n  \"Voting Session Ended\"\n];\nconst darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n  },\n});\n\nfunction HorizStepper(props) {\n  const activeStep = parseInt(props.step);\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <Box sx={{ width: \"100%\" }}>\n        <Stepper activeStep={activeStep}>\n          {steps.map((label, index) => {\n            const stepProps = {};\n            const labelProps = {};\n            return (\n              <Step key={label} {...stepProps}>\n                <StepLabel {...labelProps}>{label}</StepLabel>\n              </Step>\n            );\n          })}\n        </Stepper>\n        {activeStep === steps.length ? (\n          <React.Fragment>\n            <Typography sx={{ mt: 2, mb: 1 }}>Votes tallied</Typography>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            <Typography sx={{ mt: 2, mb: 1 }}>\n              Step {activeStep+1} - {steps[activeStep]}\n            </Typography>\n          </React.Fragment>\n        )}\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default HorizStepper;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Container } from \"react-bootstrap\";\n\nfunction Workflow(props) {\n  const states = props.states;\n  const step = props.step;\n\n  const handleClick = async () => {\n    console.log(\"Step: \", step);\n    if (step === \"0\") {\n      await states.contract.methods\n        .startProposalsRegistering()\n        .send({ from: states.owner });\n    }\n    if (step === \"1\") {\n      await states.contract.methods\n        .endProposalsRegistering()\n        .send({ from: states.owner });\n    }\n    if (step === \"2\") {\n      await states.contract.methods\n        .startVotingSession()\n        .send({ from: states.owner });\n    }\n    if (step === \"3\") {\n      await states.contract.methods\n        .endVotingSession()\n        .send({ from: states.owner });\n    }\n    if (step === \"4\") {\n      await states.contract.methods.tallyVotes().send({ from: states.owner });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Container>\n      {step === \"5\" ? \"\":\n        <Button variant=\"outline-info\" onClick={handleClick} size=\"sm\">\n          Next Step\n        </Button>\n      }\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default Workflow;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nfunction Whitelist(props) {\n  const whitelist = props.whitelist;\n\n  return (\n    <React.Fragment>\n      <Container>\n        <div>\n        <br/>\n        <h4>Whitelist</h4>\n          {\n            whitelist.map((address) => (<div>{address}</div>))\n            // Object.entries(voters).map(address => <div key={address}>{address}</div>)\n          }\n        </div>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default Whitelist;\n","import React, { useState } from \"react\";\nimport { Form, Button, Container } from \"react-bootstrap\";\n\nfunction FormVoter(props) {\n  const states = props.states;\n\n  const [inputAddress, setInputAddress] = useState(\"\");\n\n  function handleChange(event) {\n    setInputAddress(event.target.value);\n  }\n\n  async function handleSubmit() {\n    try {\n      await states.contract.methods\n        .addVoter(inputAddress)\n        .send({ from: states.owner });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Container>\n        <Form>\n          <Form.Group className=\"mb-3\">\n            <Form.Control\n              type=\"text\"\n              placeholder=\"Enter voter address\"\n              value={inputAddress}\n              onChange={handleChange}\n            />\n          </Form.Group>\n          <Button variant=\"primary\" onClick={handleSubmit}>\n            Add voter\n          </Button>\n        </Form>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default FormVoter;\n","import React, { useState } from \"react\";\nimport { Form, Button, Container } from \"react-bootstrap\";\n\nfunction FormProp(props) {\n\n  const states = props.states;\n  const voter = props.voter;\n  const proposals = props.proposals;\n  const step = props.step;\n\n  const [inputProposal, setinputProposal] = useState(\"\");\n\n  function handleChange(event) {\n    setinputProposal(event.target.value);\n  }\n\n  async function handleSubmit() {\n      await states.contract.methods.addProposal(inputProposal).send({ from: states.accounts[0] });\n;  }\n\n  return (\n    <React.Fragment>\n      <Container>\n      {!voter[0] && \n        <div>\n          You're not a voter !!\n        </div>\n      }\n      {voter[0] && parseInt(step) < 2 &&\n        <Form>\n          <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n            <Form.Label>Proposal</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              rows={3}\n              placeholder=\"Enter your proposal\"\n              value={inputProposal}\n              onChange={handleChange}\n            />\n          </Form.Group>\n          <Button variant=\"primary\" onClick={handleSubmit}>\n            Add proposal\n          </Button>\n        </Form>\n      }\n      {voter[0] &&\n      <div>\n        <br/>\n        <h4>Proposals</h4>\n          {\n            proposals.map((prop) => (<div>{prop[0]}</div>))\n          }\n        </div>\n      }\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default FormProp;\n","import React, { useState } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\n\nfunction FormVoting(props) {\n\n  const states = props.states;\n  const voter = props.voter;\n  const proposals = props.proposals;\n\n  const [inputVote, setinputVote] = useState(\"\");\n\n  function handleChange(event) {\n    setinputVote(event.target.value);\n  }\n\n  async function handleSubmit() {\n    const index = proposals.map((i) => i[0]).indexOf(inputVote);\n    await states.contract.methods\n      .setVote(index)\n      .send({ from: states.accounts[0] });\n    console.log(\"Vote for: \" + inputVote);\n    console.log(\"Index: \" + index);\n    window.location.reload();\n  }\n\n  return (\n    <React.Fragment>\n      {!voter[0] &&\n        <div>\n          You're not a voter !!\n        </div>\n      }\n      {voter[0] && !voter[1] &&\n      <Form>\n        {proposals.map((prop) => (\n          <div key={prop[0]} className=\"mb-3\" onChange={handleChange}>\n            <Form.Check\n              type=\"radio\"\n              name=\"group\"\n              value={prop[0]}\n              label={prop[0]}\n            />\n          </div>\n        ))}\n        <Button variant=\"primary\" onClick={handleSubmit}>\n          Set vote\n        </Button>\n      </Form>\n      }\n      {voter[0] && voter[1] &&\n        <div>\n        Thank you for your vote !!\n      </div>\n      }\n    </React.Fragment>\n  );\n}\n\nexport default FormVoting;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nfunction Winner(props) {\n  const winner = props.winner;\n\n  return (\n    <React.Fragment>\n      <Container>\n        <div>\n          <br />\n          <h4>Winner</h4>\n            <span style={{ fontWeight: \"bold\" }}> {winner[0]}</span>\n            <span style={{ fontStyle: \"italic\" }}> {`, with ${winner[1]} votes`}</span>\n        </div>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default Winner;\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nfunction Footer(props) {\n  const { accounts, owner } = props.states;\n\n  return (\n    <React.Fragment>\n      <Container>\n        {accounts == owner ? (\n          <footer className=\"App-footer\">{`You are Administrator`}</footer>\n        ) : (\n          <footer className=\"App-footer\">\n            {`You are connected as ${accounts}`}\n          </footer>\n        )}\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default Footer;\n","import React, { useEffect, useState } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Header from \"./components/header\";\nimport HorizStepper from \"./components/stepper\";\nimport Workflow from \"./components/workflow\";\nimport Whitelist from \"./components/whitelist\";\nimport FormVoter from \"./components/voter\";\nimport FormProp from \"./components/proposal\";\nimport FormVoting from \"./components/voting\";\nimport Winner from \"./components/winner\";\nimport Footer from \"./components/footer\";\nimport { Container } from \"react-bootstrap\";\nimport \"./App.css\";\n\nfunction App() {\n  const [states, setState] = useState({\n    web3: null,\n    accounts: null,\n    contract: null,\n    owner: null\n  });\n\n  const [step, setStatus] = useState(\"0\");\n  const [whitelist, setVoters] = useState([]);\n  const [voter, setVoter] = useState({});\n  const [proposals, setProposals] = useState([]);\n  const [winner, setWinner] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = Voting.networks[networkId];\n        const instance = new web3.eth.Contract(\n          Voting.abi,\n          deployedNetwork && deployedNetwork.address\n        );\n        const owner = await instance.methods.owner().call();\n        const status = await instance.methods.workflowStatus().call();\n        const voter = await instance.methods.getVoter(accounts[0]).call({ from: owner });\n        const allProps = await instance.methods.getAllProposals().call({ from: owner });\n\n        // web3.utils.toHex()\n\n        setState({\n          web3,\n          accounts,\n          contract: instance,\n          owner\n        });\n\n        setStatus(status);\n        setVoters(whitelist => [...whitelist, owner]);\n        setVoter(voter);\n        setProposals(allProps);\n\n        // EVENTS MANAGEMENT\n        await instance.events.WorkflowStatusChange()\n          .on(\"data\", event => {\n            const newStatus = event.returnValues.newStatus;\n            setStatus(newStatus);\n            console.log(\"New workflow status: \" + newStatus);\n          })\n          .on(\"changed\", changed => console.log(changed))\n          .on(\"error\", err => console.error(err))\n\n        await instance.events.VoterRegistered()\n          .on(\"data\", async event => {\n            const newVoter = event.returnValues.voterAddress\n            setVoters(whitelist => [...whitelist, newVoter]);\n            console.log(\"New registered voter: \" + newVoter);\n            const voterData = await instance.methods.getVoter(newVoter).call({ from: accounts[0] });\n            setVoter(voterData);\n          })\n          .on(\"changed\", changed => console.log(changed))\n          .on(\"error\", err => console.error(err))\n\n        await instance.events.ProposalRegistered()\n          .on(\"data\", async event => {\n            const newPropId = event.returnValues.proposalId;\n            const propDesc = await instance.methods.getOneProposal(newPropId).call({ from: accounts[0] });\n            const allProps = await instance.methods.getAllProposals().call({ from: accounts[0] });\n            setProposals(allProps);\n            console.log(\"New proposal added: \" + propDesc);\n          })\n          .on(\"changed\", changed => console.log(changed))\n          .on(\"error\", err => console.error(err))\n\n        await instance.events.Voted()\n          .on(\"data\", async event => {\n            const voterAddr = event.returnValues.voter;\n            const proposalId = event.returnValues.proposalId;\n            console.log(\"New vote: \" + voterAddr + \" for proposal Id: \" + proposalId);\n          })\n          .on(\"changed\", changed => console.log(changed))\n          .on(\"error\", err => console.error(err))\n\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      if (parseInt(step) === 5) {\n        const winnerId = await states.contract.methods.winningProposalID().call();\n        const winDesc = await states.contract.methods.getOneProposal(winnerId).call({ from: states.accounts[0] });\n        setWinner(winDesc);\n        console.log(winDesc);\n      }\n    })()\n  }, [step]);\n\n  return (\n    <div className=\"App\">\n      <Header states={states} />\n      {states.accounts &&\n        <div>\n          <div>\n            <br />\n            <HorizStepper step={step} />\n            {states.accounts == states.owner && <Workflow states={states} step={step} />}\n          </div>\n          <hr />\n          <Container className=\"w-50 p-3\">\n            {parseInt(step) == 0 && states.accounts == states.owner && <FormVoter states={states} voter={voter} />}\n            {parseInt(step) == 0 && states.accounts == states.owner && <Whitelist whitelist={whitelist} />}\n            {parseInt(step) > 0 && parseInt(step) < 3 && <FormProp states={states} voter={voter} proposals={proposals} step={step} />}\n            {parseInt(step) >= 3 && parseInt(step) < 5 && voter[0] && <FormVoting voter={voter} states={states} proposals={proposals} />}\n            {parseInt(step) == 5 && voter[0] && <Winner winner={winner} />}\n          </Container>\n          <Footer states={states} />\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}